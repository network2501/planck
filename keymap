#include "keymap_common.h"

const uint8_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [0] = KEYMAP( /* MIT QWERTY */
      TAB,  Q,    W,    E,    R,    T,    Y,    U,    I,    O,    P,    BSPC,
      LCTL, A,    S,    D,    F,    G,    H,    J,    K,    L,    SCLN, QUOT,
      ESC,  Z,    X,    C,    V,    B,    N,    M,    COMM, DOT,  SLSH, ENT,
      FN,   DEL,  LGUI, LALT, FN0,        SPC,  FN1,  LEFT, DOWN, UP,   RGHT),
    [1] = KEYMAP( /* MIT colemak */
      TAB,  Q,    W,    F,    P,    G,    J,    L,    U,    Y,    SCLN, BSPC,
      LCTL, A,    R,    S,    T,    D,    H,    N,    E,    I,    O,    QUOT,
      ESC,  Z,    X,    C,    V,    B,    K,    M,    COMM, DOT,  SLSH, ENT,
      FLIP, DEL,  LGUI, LALT, FN1,        SPC,  FN2,  LEFT, DOWN, UP,   RGHT),
    [2] = KEYMAP( /* fn0 raise */
      GRV,  F1,   F2,   F3,   F4,   FN25, FN26, FN31, EQL,  MINUS, FN32, TRANS,
      TRNS, F5,   F6,   F7,   F8,   FN30, FN27, LBRC, RBRC, FN33,  FN34, FN35,
      TRNS, F9,   F10,  F11,  F12,  FN29, FN28, INS,  BSLS, LBRC,  RBRC, TRNS, TRNS,
      TRNS, TRNS, TRNS, TRNS, TRNS, TRNS, TRNS, MPRV, MUTE, MPLY,  MNXT),
    [3] = KEYMAP( /* fn1 lower */
      FN10, FN11, FN12, FN13, FN14, FN15, FN16, FN17, FN18, FN19, FN20, BSPC,
      TRNS, 1,    2,    3,    4,    5,    6,    7,    8,    9,    0,    BSLS,
      TRNS, INS,  FN29, FN30, FN31, DOT,  MENU, BREAK,PSCR, FN27, MPRV, MNXT,
      TRNS, TRNS, TRNS, TRNS, TRNS, TRNS,       TRNS, HOME, PGDN, PGUP, END),

};


const uint16_t PROGMEM fn_actions[] = {
    [0] = ACTION_LAYER_MOMENTARY(2),  // to Fn overlay RAISE
    [1] = ACTION_LAYER_MOMENTARY(3),  // to Fn overlay LOWER

    /* raise layer functions */
    [10] = ACTION_MODS_KEY(MOD_LSFT, KC_GRAVE),         // ~
    [11] = ACTION_MODS_KEY(MOD_LSFT, KC_1),             // !
    [12] = ACTION_MODS_KEY(MOD_LSFT, KC_2),             // @
    [13] = ACTION_MODS_KEY(MOD_LSFT, KC_3),             // #
    [14] = ACTION_MODS_KEY(MOD_LSFT, KC_4),             // $
    [15] = ACTION_MODS_KEY(MOD_LSFT, KC_5),             // %
    [16] = ACTION_MODS_KEY(MOD_LSFT, KC_6),             // ^
    [17] = ACTION_MODS_KEY(MOD_LSFT, KC_7),             // &
    [18] = ACTION_MODS_KEY(MOD_LSFT, KC_8),             // *
    [19] = ACTION_MODS_KEY(MOD_LSFT, KC_9),             // (
    [20] = ACTION_MODS_KEY(MOD_LSFT, KC_0),             // )
    [21] = ACTION_MODS_KEY(MOD_LSFT, KC_EQL),           // +
    [22] = ACTION_MODS_KEY(MOD_LCTL, KC_X),             // cut
    [23] = ACTION_MODS_KEY(MOD_LCTL, KC_C),             // copy
    [24] = ACTION_MODS_KEY(MOD_LCTL, KC_V),             // paste

    /* LOWER LAYER mid function group */
    [25] = ACTION_MODS_KEY(MOD_LSFT | MOD_LCTL, KC_T),  // reopen tab
    [26] = ACTION_MODS_KEY(MOD_LSFT, KC_DEL),           // common user access 'cut'
    [27] = ACTION_MODS_KEY(MOD_LCTL, KC_INS),           // common user access 'copy'
    [28] = ACTION_MODS_KEY(MOD_LSFT, KC_INS),           // common user access 'paste'
    [29] = ACTION_MODS_KEY(MOD_LCTL, RBRC),             // telnet escape sequence
    [30] = ACTION_MODS_KEY(MOD_LSFT | KC_GRAVE, DOT),   // ssh escape sequence
    /* LOWER LAYER RHS symbols  */
    [31] = ACTION_MODS_KEY(MOD_LSFT, KC_EQL),           // +
    [32] = ACTION_MODS_KEY(MOD_LSFT, KC_MINUS),         // _
    [33] = ACTION_MODS_KEY(MOD_LSFT, KC_LBRC),          // {
    [34] = ACTION_MODS_KEY(MOD_LSFT, KC_RBRC),          // }
    [35] = ACTION_MODS_KEY(MOD_LSFT, KC_BSLS),          // |

